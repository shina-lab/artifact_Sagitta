=== Claim 1
This artifact reproduces the localization graph generation in section 6.4.2 (one of evaluated case TIF008) of our paper and visualized in Figure 5. 

The artifact demonstrates our software crash root cause analysis technique through four phases: 
(1) TIF008 bug reproduction using the Magma framework, 
(2) instrumented libtiff compilation with polytracker for taint analysis, 
(3) localization graph generation via data flow analysis, and 
(4) review of generated localization graph (in SVG format) against the Figure 5 results.

Required disk space: 50 GB.
Required memory: 32 GB.
Estimated time: 5 minutes for phase (1)-(3), and 5-10 minutes for phase (4).


--- Excersise Steps
1. Run run.sh to perform phase (1)-(3).
    - claim/clam1 内に生成された局所化グラフ（svg）が現れれば、われわれのソースコード（in artifact/）は正常にビルドされ、動作したことが証明されます。
2. Please follow a guidance described below to perform phase (4).


--- Guidance for phase (4)
phase 4では、生成された局所化グラフ（svg形式）がFigure 5に相当することを確認します。

生成された局所化グラフ：claims/claim1/diff.TIF008.crash-000117.taint.svg

svgファイルはWebブラウザで閲覧すると快適です。
生成された局所化グラフは大きいので画面には収まりません。効率的なアーティファクト評価のために、どのようにこのグラフを辿るべきかを以下に案内します。

まず、グラフの上流を訪れます。
ブラウザのページ内検索（Ctrl+F）で "crash-000117[0x7a2]" を検索すると、Figure 5で根本原因とラベルした頂点ノードが画面に映ります。
矢印の向きに従って、下流側に向かってグラフを辿ってください。

すると、difference highlight された（色が付いた）ノード "v32 = (uint32_t) va_arg(ap, uint32_t);" に遭遇します。
続けて、下流側に向かってグラフを辿ってください。

次にノード "td->td_tilewidth = v32;" に遭遇します。TIF008の根本原因の説明に必要なノード2です。
続けて、下流側に向かってグラフを辿ってください。
このあと分岐があり、一方が正解です。

最後の差分ノード "imagewidth = tif->tif_dir.td_tilewidth;" に遭遇します。TIF008の根本原因の説明に必要なノード3です。
続けて、下流側に向かってグラフを辿ってください。

Figure 5でDominance Integrationをラベルしたノード "while (n-- > 0 && npixels < imagewidth)" に遭遇します。TIF008の根本原因の説明に必要なノード4です。
このノードから生えているdominatesというラベルが付いた青色の太い辺をを辿ってください。

そうして局所化グラフの末尾ノード "MAGMA_LOG("TIF008", op_offset >= scanline);" に到着します。

Figure 5 の Crash Site で表示したコードと、生成された局所グラフの最下部のノードのコードが異なることにお気づきでしょうが、結論、これは問題ありません。
実際にクラッシュが発生するコードは `SETPIXEL(op, grey);` です。Figure 5ではわかりやすさのため、こちらのコードを表示しました。
一方、Magmaのカナリア `MAGMA_LOG` はクラッシュの発生を判定するコード（our paper section 6.1 Datasetを参照）であり、局所化グラフを作るときの起点としたため、svgではこちらが表示されています。

以下はクラッシュ箇所周辺のlibtiffのソースコードです。
結局、両者はコード上は結局同じ箇所を指しますので、この表示の差異は問題ありません。

```
                while (n-- > 0 && npixels < imagewidth)
#endif
                {
#ifdef MAGMA_ENABLE_CANARIES
                    MAGMA_LOG("TIF008", op_offset >= scanline); // 局所化グラフが表示したコード
#endif
					SETPIXEL(op, grey); // 実際のクラッシュ箇所。Figure 5で表示したコード
                }
```

これでphase 4終了です。


---- List of source code and input/output files

Software components (source code): 
    (1) Magma framework (modified by us in section 6.1): artifact/magma-v1.2 
    (1-2) Supplemental header file for (1): artifact/try-clang
    (2) polytracker (modified by us in section 5): artifact/polytracker
    (3) our tool library (implemented in section 5): artifact/taint_tracking
    (4) our analysis pipeline tailored for (3) (used in section 6.3): artifact/evaluation/libtiff-TIF008/run.sc

Input pair: 
    In evaluation/input-file/7fcf1f3ea2333be518eac93dc8bcfc276272db21,
        non-crash input: 004839
        crash input: crash-000117

Output format: SVG (for graphing).


--- Note: Process time and memory usage

/usr/bin/time -v 