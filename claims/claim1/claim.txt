
This artifact reproduces the localization graph generation experiment described in Section 6.4.2 of our paper and visualized in Figure 5. The artifact consists of software (source code, build scripts, and analysis tools) and sample data (TIF008 crash input and non-crash input pairs).

The artifact demonstrates our software crash root cause analysis technique through four phases: (1) TIF008 bug reproduction using the Magma framework, (2) instrumented libtiff compilation with polytracker for taint analysis, (3) localization graph generation via data flow analysis, and (4) validation of generated localization graph (in SVG format) against the Figure 5 results.

Software components: Source code (Magma/libtiff), build automation scripts, and analysis pipeline.
Dependencies: Ubuntu 22.04 and Docker.
Hardware requirements: Standard x86_64 machine (no special devices required).
Output format: SVG (for graphing).

justification:
Figure 5 の Crash Site で表示したコードと、生成された局所グラフの最下部のノードのコードが異なるのは正しいです。
実際にクラッシュが発生するコードは `SETPIXEL(op, grey);` です。Figure 5ではわかりやすさのため、こちらを表示しました。
一方、Magmaのカナリア `MAGMA_LOG` はクラッシュの発生を判定するコードで（論文の〜を参照）、局所化グラフを作るときの起点としたため、svgではこちらが表示されています。
結局、両者はコード上は結局同じクラッシュ箇所を指しますので、この差異は問題ありません。

```
                while (n-- > 0 && npixels < imagewidth)
#endif
                {
#ifdef MAGMA_ENABLE_CANARIES
                    MAGMA_LOG("TIF008", op_offset >= scanline); // 局所化グラフが表示したコード
#endif
					SETPIXEL(op, grey); // 実際のクラッシュ箇所。Figure 5で表示したコード
                }
```