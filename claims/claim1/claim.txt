=== Claim 1: Localization Graph Reproduction
This artifact demonstrates that our technique can /* FIXME: 明確なクレーム文の追加 */.

Through four phases, we reproduce case study 6.4.2 (one of evaluated case TIF008) of our paper and visualized in Figure 5:

(1) TIF008 bug reproduction using the Magma framework, 
(2) instrumented libtiff compilation with polytracker for taint analysis, 
(3) localization graph generation via data flow analysis, and 
(4) review of generated localization graph (in SVG format) against the Figure 5 results.

Generated localization graph:
    For crash: claims/claim1/diff.TIF008.crash-000117.taint.svg
    For non-crash: Not available (Non-crash input does not execute the MAGMA canary for TIF008, so no localization graph is generated)
Required disk space: 100 GB.
Required memory: 32 GB.
Estimated time: 12 minutes for phase 1-3, and 5-10 minutes for phase 4.


--- Exercise Steps
1. Run run.sh to perform phase 1-3.
    - Success of phase 2 proves that our modified polytracker successfully instruments libtiff.
    - Success of phase 3 proves that our tool generates localization graphs (SVG file appears in claims/claim1/).
2. Follow the guidance described below to perform phase 4.


--- Guidance for phase 4
In phase 4, confirm that the generated localization graph (in svg format) corresponds to Figure 5.

Success criteria for Phase 4:
1. Root cause node "crash-000117[0x7a2]" can be found.
2. All 4 key nodes (root cause, node 2, node 3, node 4) appear in sequence.
3. The data flow path connects these nodes with directed edges.
4. The terminal node shows MAGMA_LOG (equivalent to the crash site in Figure 5).

We recommend to view the svg file in your favorite web browser.
The generated localization graph is large and does not fit on the screen. 
For efficient artifact evaluation, we navigate you along this graph.

First, we visit the upstream of the graph.
Search for "crash-000117[0x7a2]" using the browser's in-page search (Ctrl+F), and the vertex node labeled as the root cause in Figure 5 will appear on your screen.
Follow the direction of the arrows and trace the graph toward the downstream side.

Then, you will encounter the difference highlighted (colored) node "v32 = (uint32_t) va_arg(ap, uint32_t);".
Continue tracing the graph toward the downstream side.

Next, you will encounter the node "td->td_tilewidth = v32;". 
This is node 2 necessary for explaining the root cause of TIF008.
Continue tracing the graph toward the downstream side.
There will be a branch after this.
Follow the path that leads to the "imagewidth = tif->tif_dir.td_tilewidth;". 
This is node 3 necessary for explaining the root cause of TIF008.
Continue tracing the graph toward the downstream side.

You will encounter the node "while (n-- > 0 && npixels < imagewidth)" labeled as dominance integration in Figure 5. 
This is node 4 necessary for explaining the root cause of TIF008.
Follow the thick blue edge labeled "dominates" that extends from this node.

At last, you will arrive at "MAGMA_LOG("TIF008", op_offset >= scanline);", the terminal node of the localization graph.

You may notice that the code shown at the crash site in Figure 5 differs from the code of the bottommost node in the generated localization graph, but in conclusion, this is not a problem.
The code where the crash actually occurs is SETPIXEL(op, grey); is displayed for clarifying in Figure 5.
On the other hand, Magma's canary MAGMA_LOG---displayed in the svg---is code that determines the occurrence of a crash (refer to our paper section 6.1 Dataset for details), and since we used it as the starting point to generate the localization graph.

The following code is the libtiff source code around the crash location.
Ultimately, both of SETPIXEL and MAGMA_LOG refer to the same location in the code, so this display difference is not a problem.

```
                while (n-- > 0 && npixels < imagewidth)
#endif
                {
#ifdef MAGMA_ENABLE_CANARIES
                    MAGMA_LOG("TIF008", op_offset >= scanline); // Code displayed by the localization graph
#endif
					SETPIXEL(op, grey); // Actual crash site. Code displayed in Figure 5
                }
```

Phase 4 and claim 1 is over. Thank you.


--- Common issues
- If SVG file is not generated: Check that Phase 1-3 completed without errors.
- If nodes are hard to find: Use browser zoom-in/out for better visibility.
- If run.sh fails: Check disk space.


--- List of source code and input/output files

Software components (source code): 
    (1) Magma framework (modified by us in section 6.1): artifact/magma-v1.2 
    (1-2) Supplemental header file for (1): artifact/try-clang
    (2) polytracker (modified by us in section 5): artifact/polytracker
    (3) our tool library (implemented in section 5): artifact/taint_tracking
    (4) our analysis pipeline tailored for (3) (used in section 6.3): artifact/evaluation/libtiff-TIF008/run.sc

Input pair: 
    In evaluation/input-file/7fcf1f3ea2333be518eac93dc8bcfc276272db21,
        non-crash input: 004839
        crash input: crash-000117

Output format: SVG (for graphing).
